---
    name: Terraform Apply
    on:
      workflow_dispatch:
        inputs:
          terraform_action:
            description: 'Terraform Apply - choose action'
            required: true
            default: 'apply'
            type: choice
            options:
              - 'apply'
              - 'destroy'

    jobs:
      plan:
        name: Terraform Plan
        runs-on:
          ubuntu-latest
        permissions:
          id-token: write
          contents: read
        concurrency: "${{vars.BACKEND_AZURE_STORAGE_ACCOUNT_NAME}}-${{vars.BACKEND_AZURE_STORAGE_ACCOUNT_CONTAINER_NAME}}"
        env:
          ARM_TENANT_ID: "${{ vars.ARM_TENANT_ID }}"
          ARM_SUBSCRIPTION_ID: "${{ vars.ARM_SUBSCRIPTION_ID }}"
          ARM_CLIENT_ID: "${{ vars.ARM_CLIENT_ID }}"
          ARM_USE_AZUREAD: true
          ARM_USE_OIDC: true
          FABRIC_USE_OIDC: true
          FABRIC_TENANT_ID: "${{ vars.ARM_TENANT_ID }}"
          FABRIC_CLIENT_ID: "${{ vars.ARM_CLIENT_ID }}"

        steps:
          - name: Checkout Code
            uses: actions/checkout@v4

          - name: Install Terraform
            uses: hashicorp/setup-terraform@v3

          - name: Terraform Init
            run: |
              terraform init \
              -backend-config="resource_group_name=${{vars.BACKEND_AZURE_RESOURCE_GROUP_NAME}}" \
              -backend-config="storage_account_name=${{vars.BACKEND_AZURE_STORAGE_ACCOUNT_NAME}}" \
              -backend-config="container_name=${{vars.BACKEND_AZURE_STORAGE_ACCOUNT_CONTAINER_NAME}}" \
              -backend-config="key=terraform.tfstate"

          - name: Terraform Plan for $${{ github.event.inputs.terraform_action == 'destroy' && 'Destroy' || 'Apply' }}
            run: |
              # shellcheck disable=SC2086
              terraform plan -out=tfplan -input=false ${{ github.event.inputs.terraform_action == 'destroy' && '-destroy' || '' }}

          - name: Create Module Artifact
            run: |
              $stagingDirectory = "staging"
              New-Item -Path . -Name $stagingDirectory -ItemType "directory"
              Copy-Item -Path "./*" -Exclude @(".git", ".terraform", ".github",  $stagingDirectory) -Recurse -Destination "./$stagingDirectory"

            shell: pwsh

          - name: Publish Module Artifact
            uses: actions/upload-artifact@v4
            with:
              name: module
              path: ./staging/

          - name: Show the Plan for Review
            run: terraform show tfplan

      apply:
        needs: plan
        name: Terraform ${{ github.event.inputs.terraform_action == 'destroy' && 'Destroy' || 'Apply' }}
        runs-on:
          ${runner_name}
        concurrency: "${{vars.BACKEND_AZURE_STORAGE_ACCOUNT_NAME}}-${{vars.BACKEND_AZURE_STORAGE_ACCOUNT_CONTAINER_NAME}}"
        permissions:
          id-token: write
          contents: read
        env:
          ARM_TENANT_ID: "${{ vars.ARM_TENANT_ID }}"
          ARM_SUBSCRIPTION_ID: "${{ vars.ARM_SUBSCRIPTION_ID }}"
          ARM_CLIENT_ID: "${{ vars.ARM_CLIENT_ID }}"
          ARM_USE_AZUREAD: true
          ARM_USE_OIDC: true

        steps:
          - name: Download a Build Artifact
            uses: actions/download-artifact@v4
            with:
              name: module

          - name: Install Terraform
            uses: hashicorp/setup-terraform@v3

          - name: Terraform Init
            run: |
              terraform init \
              -backend-config="resource_group_name=${{vars.BACKEND_AZURE_RESOURCE_GROUP_NAME}}" \
              -backend-config="storage_account_name=${{vars.BACKEND_AZURE_STORAGE_ACCOUNT_NAME}}" \
              -backend-config="container_name=${{vars.BACKEND_AZURE_STORAGE_ACCOUNT_CONTAINER_NAME}}" \
              -backend-config="key=terraform.tfstate"

          - name: Terraform ${{ github.event.inputs.terraform_action == 'destroy' && 'Destroy' || 'Apply' }}
            run: terraform apply -input=false -auto-approve tfplan